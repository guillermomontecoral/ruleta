package obligatorio_dda.presentacion;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import obligatorio_dda.dominio.Mesa;
import obligatorio_dda.dominio.Sesion;
import obligatorio_dda.dominio.TipoApuesta;
import obligatorio_dda.presentacion.controlador.IniciarMesaControlador;
import obligatorio_dda.presentacion.vista.IniciarMesaVista;

/**
 *
 * @author monte
 */
public class VentanaIniciarMesa extends javax.swing.JFrame implements IniciarMesaVista {

    private IniciarMesaControlador controlador;

    /**
     * Creates new form VentanaIniciarMesa
     */
    public VentanaIniciarMesa(Sesion sesion) {
        initComponents();
        this.setLocationRelativeTo(null);
        list_tipoApuestas.setCellRenderer(new TipoApuestaRenderer());
        this.controlador = new IniciarMesaControlador(sesion, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b_iniciarMesa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_tipoApuestas = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        l_nombreCrupier = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Aplicacion Crupier - Iniciar Mesa");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        b_iniciarMesa.setText("Iniciar");
        b_iniciarMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_iniciarMesaActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(list_tipoApuestas);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Tipo de apuesta");

        l_nombreCrupier.setText("jLabel2");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Crupier");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(b_iniciarMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(76, 76, 76)
                                .addComponent(l_nombreCrupier))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_nombreCrupier)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(b_iniciarMesa)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
cerrarSesion();
    }//GEN-LAST:event_formWindowClosed

    private void b_iniciarMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_iniciarMesaActionPerformed

        iniciarMesa();
        //controlador.abrirRuletaCrupier();

    }//GEN-LAST:event_b_iniciarMesaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_iniciarMesa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l_nombreCrupier;
    private javax.swing.JList list_tipoApuestas;
    // End of variables declaration//GEN-END:variables

    //Preguntar si esto esta bien
    @Override
    public void mostrarTiposApuestas(List<TipoApuesta> tipoApuestas) {
        list_tipoApuestas.setListData(tipoApuestas.toArray());
        ListSelectionModel selectionModel = list_tipoApuestas.getSelectionModel();
        int indice = buscarIndice(tipoApuestas, "Directa");
        // Configurar un ListSelectionListener para manejar los cambios de selección
        list_tipoApuestas.addListSelectionListener((ListSelectionEvent e) -> {
            // Verificar si la apuesta "Directa" está seleccionada y si es así, mantenerla seleccionada

            if (indice != -1) {
                if (!selectionModel.isSelectedIndex(indice)) {
                    selectionModel.addSelectionInterval(indice, indice);
                }
            }
        });

        //Si "Directa" está en la lista, selecciónala por defecto
        if (indice != -1) {
            selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            selectionModel.setSelectionInterval(indice, indice);
            selectionModel.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        }

    }

    private int buscarIndice(List<TipoApuesta> tipoApuestas, String nombre) {
        for (int i = 0; i < tipoApuestas.size(); i++) {
            if (nombre.equals(tipoApuestas.get(i).getNombre())) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public List<TipoApuesta> obtenerTipoApuestasSeleccionados() {
        int[] selectedIndices = list_tipoApuestas.getSelectedIndices();
        List<TipoApuesta> tipoApuestasSelecionadas = new ArrayList<>();
        for (int index : selectedIndices) {
            TipoApuesta selectedItem = (TipoApuesta) list_tipoApuestas.getModel().getElementAt(index);
            tipoApuestasSelecionadas.add(selectedItem);

            System.out.println("Tipo apuesta seleccionada: " + selectedItem.toString());
        }

        return tipoApuestasSelecionadas;
    }

    @Override
    public void cerrar() {
        dispose();
    }

    @Override
    public void mostrarMensajeError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
    }

    private void iniciarMesa() {
        this.controlador.iniciarMesa(this.obtenerTipoApuestasSeleccionados());
    }

    @Override
    public void abrirRuletaCrupier(Mesa mesa, Sesion sesion) {
        new VentanaOperar(mesa, sesion).setVisible(true);
        dispose();
    }

    @Override
    public void nombreCrupier(String nombreCompleto) {
        l_nombreCrupier.setText(nombreCompleto);
    }

    private void cerrarSesion() {
        this.controlador.cerrarSesion();
    }

    private class TipoApuestaRenderer extends JLabel implements ListCellRenderer<TipoApuesta> {

        @Override
        public Component getListCellRendererComponent(JList list, TipoApuesta tipoApuesta, int index, boolean isSelected, boolean cellHasFocus) {
            this.setText(tipoApuesta.getNombre());
            if (isSelected) {
                this.setForeground(Color.BLUE);
            } else {
                this.setForeground(list.getForeground());
            }
            return this;
        }
    }
}
